#include_once static/inc/open-source-copyright-mit.inc

package ${package}.service.impl;

import br.com.jcv.commons.library.commodities.constantes.GenericConstantes;
import br.com.jcv.commons.library.commodities.dto.MensagemResponse;
import br.com.jcv.commons.library.commodities.enums.GenericStatusEnums;
import br.com.jcv.commons.library.commodities.dto.RequestFilter;

import ${package}.dto.${classebase}DTO;
import ${package}.model.${classebase};
import ${package}.constantes.${classebase}Constantes;
import ${package}.repository.${classebase}Repository;
import ${package}.service.${classebase}Service;
import ${package}.exception.${classebase}NotFoundException;

import java.text.SimpleDateFormat;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Propagation;

import java.text.ParseException;
import java.util.*;
import java.util.UUID;
import java.util.stream.Collectors;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import lombok.extern.slf4j.Slf4j;


/**
* ${classebase}ServiceImpl - Implementation for ${classebase} interface
*
* @author ${autor}
* @since ${agora}
*/


@Slf4j
@Service
public class ${classebase}ServiceImpl implements ${classebase}Service
{
#include static/inc/service-impl-static-message-notfound.inc

    @Autowired private ${classebase}Repository ${lclassebase}Repository;

    @Override
    @Transactional(transactionManager="${projeto}transactionManager",
        propagation = Propagation.REQUIRED,
        rollbackFor = Throwable.class,
        noRollbackFor = ${classebase}NotFoundException.class
    )
    public void delete(Long id) {
        log.info("Deletando ${classebase} com id = {}", id);
        ${lclassebase}Repository.findById(id)
                .orElseThrow(
                    () -> new ${classebase}NotFoundException(${Uclassebase}_NOTFOUND_WITH_ID  + id,
                        HttpStatus.NOT_FOUND,
                        ${Uclassebase}_NOTFOUND_WITH_ID  + id));
        ${lclassebase}Repository.deleteById(id);
    }

    @Override
    @Transactional(transactionManager="${projeto}transactionManager",
        propagation = Propagation.REQUIRED,
        rollbackFor = Throwable.class,
        noRollbackFor = ${classebase}NotFoundException.class
    )
    public ${classebase}DTO salvar(${classebase}DTO ${lclassebase}DTO) {
        Date now = new Date();
        if(Objects.nonNull(${lclassebase}DTO.getId()) && ${lclassebase}DTO.getId() != 0) {
            ${lclassebase}DTO.setDateUpdated(now);
        } else {
            ${lclassebase}DTO.setStatus(GenericStatusEnums.PENDENTE.getShortValue());
            ${lclassebase}DTO.setDateCreated(now);
            ${lclassebase}DTO.setDateUpdated(now);
        }
        return this.toDTO(${lclassebase}Repository.save(this.toEntity(${lclassebase}DTO)));
    }

    @Override
    @Transactional(transactionManager="${projeto}transactionManager",
        propagation = Propagation.REQUIRED,
        rollbackFor = Throwable.class,
        noRollbackFor = ${classebase}NotFoundException.class
    )
    public ${classebase}DTO findById(Long id) {
        Optional<${classebase}> ${lclassebase}Data =
            Optional.ofNullable(${lclassebase}Repository.findById(id)
                .orElseThrow(
                    () -> new ${classebase}NotFoundException(${Uclassebase}_NOTFOUND_WITH_ID  + id,
                    HttpStatus.NOT_FOUND,
                    ${Uclassebase}_NOTFOUND_WITH_ID  + id ))
                );

        return ${lclassebase}Data.map(this::toDTO).orElse(null);
    }

    @Override
    @Transactional(transactionManager="${projeto}transactionManager",
        propagation = Propagation.REQUIRED,
        rollbackFor = Throwable.class,
        noRollbackFor = ${classebase}NotFoundException.class
    )
    public boolean partialUpdate(Long id, Map<String, Object> updates) {

        Optional<${classebase}> ${lclassebase}Data =
            Optional.ofNullable(${lclassebase}Repository.findById(id)
                .orElseThrow(
                    () -> new ${classebase}NotFoundException(${Uclassebase}_NOTFOUND_WITH_ID  + id,
                        HttpStatus.NOT_FOUND,
                        ${Uclassebase}_NOTFOUND_WITH_ID  + id))
                    );
        if (${lclassebase}Data.isPresent()) {
            ${classebase} ${lclassebase} = ${lclassebase}Data.get();

            for (Map.Entry<String,Object> entry : updates.entrySet()) {
#include static/inc/service-impl-method-partial-update.inc && excludeFields[id,status,dateCreated,dateUpdated]
        }
        if(updates.get(${classebase}Constantes.DATEUPDATED) == null) ${lclassebase}.setDateUpdated(new Date());
        ${lclassebase}Repository.save(${lclassebase});
        return true;
    }
        return false;
    }




    @Override
    @Transactional(transactionManager="${projeto}transactionManager",
        propagation = Propagation.REQUIRED,
        rollbackFor = Throwable.class,
        noRollbackFor = ${classebase}NotFoundException.class
    )
    public ${classebase}DTO updateStatusById(Long id, String status) {
        Optional<${classebase}> ${lclassebase}Data =
            Optional.ofNullable( ${lclassebase}Repository.findById(id)
                .orElseThrow(() -> new ${classebase}NotFoundException(${Uclassebase}_NOTFOUND_WITH_ID  + id,
                    HttpStatus.NOT_FOUND,
                    ${Uclassebase}_NOTFOUND_WITH_ID + id))
                );
        ${classebase} ${lclassebase} = ${lclassebase}Data.orElseGet(${classebase}::new);
        ${lclassebase}.setStatus(status);
        ${lclassebase}.setDateUpdated(new Date());
        return toDTO(${lclassebase}Repository.save(${lclassebase}));

    }

    @Override
    public List<${classebase}DTO> findAllByStatus(String status) {
        return ${lclassebase}Repository.findAllByStatus(status)
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

@Override
@Transactional(transactionManager="${projeto}transactionManager",
    propagation = Propagation.REQUIRED,
    rollbackFor = Throwable.class,
    noRollbackFor = ${classebase}NotFoundException.class
)
public Map<String, Object> findPageByFilter(RequestFilter filtro) {
    List<${classebase}> lst${classebase};
#include static/inc/service-impl-method-findPageByFilter.inc

    for (Map.Entry<String,Object> entry : filtro.getCamposFiltro().entrySet()) {
#include static/inc/service-impl-method-findPageByFilter-for.inc
    }

    Pageable paging = PageRequest.of(filtro.getPagina(), filtro.getQtdeRegistrosPorPagina());
    Page<${classebase}> pagina${classebase} = ${lclassebase}Repository.find${classebase}ByFilter(paging,
#include static/inc/service-impl-method-findPageByFilter-page.inc && excludeCharAtBeginFromFirstField[,]
    );

    lst${classebase} = pagina${classebase}.getContent();
    Map<String,Object> response = new HashMap<>();
    response.put("currentPage", pagina${classebase}.getNumber());
    response.put("totalItems", pagina${classebase}.getTotalElements());
    response.put("totalPages", pagina${classebase}.getTotalPages());
    response.put("page${classebase}Items", lst${classebase}.stream().map(this::toDTO).collect(Collectors.toList()));
    return response;
}


    @Override
@Transactional(transactionManager="${projeto}transactionManager",
    propagation = Propagation.REQUIRED,
    rollbackFor = Throwable.class,
    noRollbackFor = ${classebase}NotFoundException.class
)
    public List<${classebase}DTO> findAllByFilter(RequestFilter filtro) {
#include static/inc/service-impl-method-findAllByFilter.inc
        for (Map.Entry<String,Object> entry : filtro.getCamposFiltro().entrySet()) {
#include static/inc/service-impl-method-findAllByFilter-for.inc
        }

        List<${classebase}> lst${classebase} = ${lclassebase}Repository.find${classebase}ByFilter(
#include static/inc/service-impl-method-findAllByFilter-list.inc && excludeCharAtBeginFromFirstField[,]
        );

        return lst${classebase}.stream().map(this::toDTO).collect(Collectors.toList());
    }

#include static/inc/service-impl-method-findAllModelByFieldAndStatus-list.inc && excludeFields[status]
#include static/inc/service-impl-method-findModelByFieldAndStatus-list.inc && excludeFields[status]
#include static/inc/service-impl-method-updateFieldById.inc && excludeFields[id,status]

    public ${classebase}DTO toDTO(${classebase} ${lclassebase}) {
        ${classebase}DTO ${lclassebase}DTO = new ${classebase}DTO();
#include static/inc/service-impl-method-ToDTO.inc
        return ${lclassebase}DTO;
    }

    public ${classebase} toEntity(${classebase}DTO ${lclassebase}DTO) {
        ${classebase} ${lclassebase} = null;
        ${lclassebase} = new ${classebase}();
#include static/inc/service-impl-method-ToEntity.inc
        return ${lclassebase};
    }
}
