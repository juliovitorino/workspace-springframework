#include_once static/inc/open-source-copyright-mit.inc

package ${package}.controller;

import ${package}.dto.${classebase}DTO;
import ${package}.service.${classebase}Service;
import ${package}.dto.RequestFilter;
import ${package}.exception.${classebase}NotFoundException;
import ${package}.exception.CommoditieBaseException;
import ${package}.enums.GenericStatusEnums;
import ${package}.constantes.${classebase}Constantes;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.validation.Valid;
import java.net.URI;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.extern.slf4j.Slf4j;
import javax.validation.Valid;

/**
* ${classebase}Controller - Controller for ${classebase} API
*
* @author ${autor}
* @since ${agora}
* @copyright(c), Julio Vitorino
*/

@Slf4j
@RestController
@RequestMapping("/v1/api/${lclassebase}")
public class ${classebase}Controller
{
     @Autowired private ${classebase}Service ${lclassebase}Service;

#include_once static/inc/controller-swagger-annotations.inc
    @GetMapping("/list")
    public ResponseEntity<List<${classebase}DTO>> findAll${classebase}() {
        try {
            List<${classebase}DTO> ${lclassebase}s = ${lclassebase}Service.findAllByStatus(GenericStatusEnums.ATIVO.getShortValue());

            if (${lclassebase}s.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }

            return new ResponseEntity<>(${lclassebase}s, HttpStatus.OK);
        } catch(CommoditieBaseException e) {
            return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
        } catch (Exception e) {
            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

#include_once static/inc/controller-swagger-annotations.inc
    @GetMapping("/list/{status}")
    public ResponseEntity<List<${classebase}DTO>> findAll${classebase}(@PathVariable("status") String status) {
        try {
            List<${classebase}DTO> ${lclassebase}s = ${lclassebase}Service.findAllByStatus(status);

            if (${lclassebase}s.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }

            return new ResponseEntity<>(${lclassebase}s, HttpStatus.OK);
        } catch(CommoditieBaseException e) {
            return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
        } catch (Exception e) {
            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }



#include_once static/inc/controller-swagger-annotations.inc
    @GetMapping("/pagefilter")
    public ResponseEntity<Map<String,Object>> pageFilter${classebase}Dinamico(@RequestBody RequestFilter filtro) {
        try{
            Map<String,Object> responseFilter = ${lclassebase}Service.findPageByFilter(filtro);
            return new ResponseEntity<>(responseFilter, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


#include_once static/inc/controller-swagger-annotations.inc
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> delete${classebase}(@PathVariable("id") long id) {
        try {
            ${lclassebase}Service.delete(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch(${classebase}NotFoundException ex) {
            return  new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch(CommoditieBaseException e) {
            return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

#include_once static/inc/controller-swagger-annotations.inc
    @PostMapping
    public ResponseEntity<Long> create${classebase}(@RequestBody @Valid ${classebase}DTO ${lclassebase}DTO) {
        try {
            ${classebase}DTO ${lclassebase}Saved = ${lclassebase}Service.salvar(${lclassebase}DTO);
                URI location = ServletUriComponentsBuilder
                        .fromCurrentRequest()
                        .path("/{id}")
                        .buildAndExpand(${lclassebase}Saved.getId())
                        .toUri();
                return ResponseEntity.status(HttpStatus.CREATED).header(HttpHeaders.LOCATION, String.valueOf(location)).build();
        } catch(CommoditieBaseException e) {
            return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
        } catch (Exception e) {
            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


#include_once static/inc/controller-swagger-annotations.inc
    @GetMapping("/{id}")
    public ResponseEntity<${classebase}DTO> get${classebase}ById(@PathVariable("id") Long id) {
      try {
           ${classebase}DTO ${lclassebase}DTO = ${lclassebase}Service.findById(id);

           if (${lclassebase}DTO != null) {
               return new ResponseEntity<>(${lclassebase}DTO, HttpStatus.OK);
           } else {
               return new ResponseEntity<>(HttpStatus.NOT_FOUND);
           }
      } catch (CommoditieBaseException e) {
          return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
      } catch (Exception e) {
          return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
      }
    }

#include_once static/inc/controller-swagger-annotations.inc
    @PutMapping("/{id}")
    public ResponseEntity<${classebase}DTO> update${classebase}(@PathVariable("id") Long id, @RequestBody @Valid ${classebase}DTO ${lclassebase}DTO) {
        ${classebase}DTO ${lclassebase}Data = ${lclassebase}Service.findById(id);

        if(${lclassebase}Data == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        try {
            ${lclassebase}DTO.setId(id);
            ${lclassebase}DTO.setDateUpdated(new Date());
            ${classebase}DTO ${lclassebase}Saved = ${lclassebase}Service.salvar(${lclassebase}DTO);
            return new ResponseEntity<>(${lclassebase}DTO, HttpStatus.OK);
        } catch(CommoditieBaseException e) {
            return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
        } catch (Exception e) {
            return new ResponseEntity(e, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


#include_once static/inc/controller-swagger-annotations.inc
    @RequestMapping(value = "/{id}",
            method = RequestMethod.PATCH,
            consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> partialUpdateGeneric(
            @RequestBody Map<String, Object> updates,
            @PathVariable("id") Long id) {
        ${classebase}DTO ${lclassebase}Data = ${lclassebase}Service.findById(id);
        if (${lclassebase}Data == null || !${lclassebase}Service.partialUpdate(id, updates)) {
            return (ResponseEntity<?>) ResponseEntity.notFound();
        }
        return ResponseEntity.ok("${classebase} atualizada");
    }

#include_once static/inc/controller-swagger-annotations.inc
    @PatchMapping("/{id}/{status}")
    public ResponseEntity<${classebase}DTO> updateStatusById(
            @PathVariable("id") Long id, @PathVariable("status") String status) {
      try {
        ${classebase}DTO ${lclassebase}Updated = ${lclassebase}Service.updateStatusById(id, status);
        return new ResponseEntity<>(${lclassebase}Updated, HttpStatus.OK);
      } catch(${classebase}NotFoundException e) {
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
      } catch(CommoditieBaseException e) {
        return new ResponseEntity(e.getMensagemResponse(), e.getHttpStatus());
      } catch (Exception e) {
        return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
      }
    }

#include static/inc/controller-method-findClasseByField.inc && excludeFields[status]

}